// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum VideoVisibility {
  PUBLIC
  PRIVATE
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  bannerImage           String?
  bannerImageKey        String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean?               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  // Optional for WebAuthn support
  Authenticator         Authenticator[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Video            Video[]
  VideoViews       VideoViews[]
  VideoReactions   VideoReactions[]
  subscriptions    Subscription[]     @relation("ViewerRelation")
  subscribers      Subscription[]     @relation("CreatorRelation")
  Comments         Comments[]
  commentReactions commentReactions[]
  Playlists        Playlists[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Video       Video[]

  @@index([name])
}

model Video {
  id             String           @id @default(cuid())
  title          String
  description    String?          @db.Text
  muxStatus      String
  muxAssetId     String?          @unique
  muxUploadId    String?          @unique
  muxPlaybackId  String?          @unique
  muxTrackId     String?          @unique
  muxTrackStatus String?
  url            String
  thumbnailUrl   String?
  thumbnailKey   String?
  previewUrl     String?
  previewKey     String?
  duration       Int              @default(0)
  visibility     VideoVisibility  @default(PRIVATE)
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  VideoViews     VideoViews[]
  VideoReactions VideoReactions[]
  Comments       Comments[]
  PlaylistVideos PlaylistVideos[]

  @@index([title])
  @@index([categoryId])
  @@index([userId])
}

model VideoViews {
  id        String   @id @default(cuid())
  videoId   String
  userId    String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([videoId, userId])
}

model VideoReactions {
  id        String       @id @default(cuid())
  videoId   String
  userId    String
  type      ReactionType
  video     Video        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([videoId, userId])
}

model Subscription {
  id        String   @id @default(cuid())
  viewerId  String
  creatorId String
  viewer    User     @relation("ViewerRelation", fields: [viewerId], references: [id], onDelete: Cascade)
  creator   User     @relation("CreatorRelation", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([viewerId, creatorId])
}

model Comments {
  id               String             @id @default(cuid())
  videoId          String
  userId           String
  parentId         String?
  parent           Comments?          @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
  comment          String             @db.Text
  video            Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  commentReactions commentReactions[]
  replies          Comments[]         @relation("ParentComment")

  @@index([videoId])
}

model commentReactions {
  id        String       @id @default(cuid())
  commentId String
  userId    String
  type      ReactionType
  comment   Comments     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([commentId, userId])
  @@index([commentId])
}

model Playlists {
  id             String           @id @default(cuid())
  name           String
  description    String?
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PlaylistVideos PlaylistVideos[]

  @@index([userId])
}

model PlaylistVideos {
  id         String    @id @default(cuid())
  playlistId String
  videoId    String
  playlist   Playlists @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([playlistId, videoId])
}
